services:
  redis:
    image: redis/redis-stack:latest
    ports:
      - "6379:6379"
    networks:
      - redis_network
    
  redisinsight:
    image: redislabs/redisinsight:1.14.0
    container_name: redisinsight
    ports:
      - "8001:8001"
    volumes:
      - ./redisinsight-data:/db
    networks:
      - redis_network
    depends_on:
      - redis

  postgresql:
    image: postgres:latest
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mydb
      POSTGRES_PORT: 5432
      POSTGRES_NAME: mydb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres_data:/host_postgres_data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d mydb"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - postgres_network
  
  adminer:
    image: adminer
    restart: always
    ports:
      - 5051:8080
    environment:
      ADMINER_DEFAULT_SERVER: postgresql
      ADMINER_DESIGN: nette
      ADMINER_PLUGINS: tables-filter tinymce
    networks:
      - postgres_network
    depends_on:
      - postgresql
    
  dbmate:
    image: amacneil/dbmate
    environment:
      DATABASE_URL: postgres://user:password@postgresql:5432/mydb?sslmode=disable
    volumes:
      - ./validator/db:/db
    command: up
    depends_on:
      postgresql:
        condition: service_healthy
    networks:
    - postgres_network


  query_node:
    build:
      context: .
      dockerfile: dockerfiles/query_node.dockerfile
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
      restart_policy:
        condition: on-failure
      update_config:
        parallelism: 1
        delay: 10s
      rollback_config:
        parallelism: 1
        delay: 10s
    depends_on:
      - redis
      - postgresql
    volumes:
      - .:/app
    networks:
      - postgres_network
      - redis_network
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: postgresql
      POSTGRES_PORT: 5432
      POSTGRES_NAME: mydb

  metagraph_syncer:
    build:
      context: .
      dockerfile: dockerfiles/metagraph_syncer.dockerfile
    depends_on:
      - postgresql
    volumes:
      - .:/app
    networks:
      - postgres_network
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: postgresql
      POSTGRES_PORT: 5432
      POSTGRES_NAME: mydb
      RUN_ONCE: false
      DUMMY: true
      SECONDS_BETWEEN_SYNC: 120
    entrypoint: ["python3.11", "/app/validator/metagraph_syncer/metagraph_syncer.py"]


  core_validator:
    build:
      context: .
      dockerfile: dockerfiles/core.dockerfile
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: postgresql
      POSTGRES_PORT: 5432
      POSTGRES_NAME: mydb
    depends_on:
      - redis
      - postgresql
    volumes:
      - .:/app
    networks:
      - postgres_network
      - redis_network

  signing_service:
    build:
      context: .
      dockerfile: dockerfiles/signing_service.dockerfile
    depends_on:
      - redis
    volumes:
      - ./validator/signing_service:/app/validator/signing_service
      - ~/.bittensor:/root/.bittensor
    # Below needs to be from config somehow
    environment:
      WALLET_NAME: new_test
      HOTKEY_NAME: 1
    networks:
      - redis_network


networks:
  postgres_network:
    driver: bridge
  redis_network:
    driver: bridge

volumes:
  postgres_data:
  pgadmin-data:
  redisinsight:
