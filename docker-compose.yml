services:


  control_node:
    build:
      context: .
      dockerfile: dockerfiles/control_node.dockerfile
    depends_on:
      dbmate:
        condition: service_completed_successfully
      redis:
        condition: service_started
    networks:
      - postgres_network
      - redis_network
    entrypoint: ["python", "-u", "/app/validator/control_node/src/main.py"]
    volumes:
      - ~/.bittensor/wallets:/root/.bittensor/wallets
    env_file:
      - .vali.env
    container_name: control_node
    deploy:
      restart_policy:
        condition: on-failure

  query_node:
    build:
      context: .
      dockerfile: dockerfiles/query_node.dockerfile
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
      restart_policy:
        condition: on-failure
    depends_on:
      - redis
      - postgresql
    networks:
      - postgres_network
      - redis_network
    volumes:
      - ~/.bittensor/wallets:/root/.bittensor/wallets
    entrypoint: ["python", "-u", "/app/validator/query_node/src/main.py"]
    container_name: query_node
    env_file:
      - .vali.env

  entry_node:
    build:
      context: .
      dockerfile: dockerfiles/entry_node.dockerfile
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
      restart_policy:
        condition: on-failure
    depends_on:
      - redis
      - postgresql
    networks:
      - postgres_network
      - redis_network
    ports:
      - "8091:8091"
    entrypoint: ["python", "-u", "/app/validator/entry_node/src/server.py"]
    container_name: entry_node
    env_file:
      - .vali.env
    profiles:
      - entry_node_profile

  postgresql:
    image: postgres:latest
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - postgres_network
    container_name: 0_postgresql
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_HOST: ${POSTGRES_HOST}

  dbmate:
    image: amacneil/dbmate
    volumes:
      - ./validator/db:/db
    command: up
    depends_on:
      postgresql:
        condition: service_healthy
    networks:
      - postgres_network
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresql:5432/${POSTGRES_DB}?sslmode=disable
    container_name: 0_dbmate


  redis:
    image: redis/redis-stack:latest
    networks:
      - redis_network
    container_name: 0_redis
    deploy:
      restart_policy:
        condition: on-failure

networks:
  postgres_network:
    driver: bridge
  redis_network:
    driver: bridge

volumes:
  postgres_data:
