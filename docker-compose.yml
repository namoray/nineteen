services:
  redis:
    image: redis/redis-stack:latest
    ports:
      - "6379:6379"

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    depends_on:
      - prometheus

  postgresql:
    image: postgres:latest
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mydb
      POSTGRES_PORT: 5432
      POSTGRES_NAME: mydb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres_data:/host_postgres_data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d mydb"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - postgres_network
  
  adminer:
    image: adminer
    restart: always
    ports:
      - 5051:8080
    environment:
      ADMINER_DEFAULT_SERVER: postgresql
      ADMINER_DESIGN: nette
      ADMINER_PLUGINS: tables-filter tinymce
    networks:
      - postgres_network
    depends_on:
      - postgresql
    
  dbmate:
    image: amacneil/dbmate
    environment:
      DATABASE_URL: postgres://user:password@postgresql:5432/mydb?sslmode=disable
    volumes:
      - ./validator/db:/db
    command: up
    depends_on:
      postgresql:
        condition: service_healthy
    networks:
    - postgres_network


  query_node:
    build:
      context: .
      dockerfile: dockerfiles/query_node.dockerfile
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
      restart_policy:
        condition: on-failure
      update_config:
        parallelism: 1
        delay: 10s
      rollback_config:
        parallelism: 1
        delay: 10s
    depends_on:
      - redis
      - postgresql

  load_balancer:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - query_node

  core_validator:
    build:
      context: .
      dockerfile: dockerfiles/core.dockerfile
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: postgresql
      POSTGRES_PORT: 5432
      POSTGRES_NAME: mydb
    depends_on:
      - redis
      - postgresql
    volumes:
      - .:/app
    networks:
      - postgres_network



networks:
  postgres_network:
    driver: bridge

volumes:
  postgres_data:
  pgadmin-data:
