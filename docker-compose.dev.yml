services:
  core:
    build:
      context: .
      dockerfile: dockerfiles/core.dockerfile
      args:
        - GITHUB_PAT=${GITHUB_PAT}
    image: core
    networks:
      - postgres_network
      - redis_network
    depends_on:
      dbmate:
        condition: service_completed_successfully
    container_name: dev_core

  control_node:
    build:
      context: .
      dockerfile: dockerfiles/control_node.dockerfile
    depends_on:
      dbmate:
        condition: service_completed_successfully
      redis:
        condition: service_started
      core:
        condition: service_started
    volumes:
      - .:/app
      - ~/.bittensor/wallets:/root/.bittensor/wallets
    networks:
      - postgres_network
      - redis_network
    entrypoint: ["python", "-u", "/app/validator/control_node/src/main.py"]
    env_file:
      - .dev.env
    container_name: dev_control_node

  postgresql:
    image: postgres:latest
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - postgres_network
    ports:
      - "5432:5432"
    env_file:
      - .dev.env
    container_name: 0_dev_postgresql

  dbmate:
    image: amacneil/dbmate
    volumes:
      - ./validator/db:/db
    command: up
    depends_on:
      postgresql:
        condition: service_healthy
    networks:
      - postgres_network
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresql:5432/${POSTGRES_DB}?sslmode=disable
    container_name: 0_dbmate

  redis:
    image: redis/redis-stack:latest
    networks:
      - redis_network
    ports:
      - "6379:6379"
    container_name: 0_redis

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    container_name: 0_prometheus
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:latest
    depends_on:
      - prometheus
    container_name: 0_grafana
    ports:
      - "3000:3000"

networks:
  postgres_network:
    driver: bridge
  redis_network:
    driver: bridge

volumes:
  postgres_data:
